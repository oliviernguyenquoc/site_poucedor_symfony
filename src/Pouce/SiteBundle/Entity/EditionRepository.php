<?php

namespace Pouce\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * EditionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EditionRepository extends EntityRepository
{
	public function findNextEditionByUserSchool($user)
	{
		$qb = $this	-> createQueryBuilder('e')
                    -> where('e.status = :statusScheduled OR e.status = :statusRegistering')
                     ->setParameter('statusScheduled'   , 'scheduled')
                     ->setParameter('statusRegistering' , 'registering')
                    -> join('e.schools','s')
                    -> andWhere('s.name = :schoolName')
                     ->setParameter('schoolName', $user->getSchool()->getName())
                    -> orderBy('e.dateOfEvent','ASC')
                    ->setMaxResults(1);
                    
        // DO NOT put "->getSingleResult()" here (because NoResultExeption cached somewhere else)
		return $qb->getQuery();
	}

	public function findPreviousEditionByUserSchool($user)
	{
		$qb = $this	-> createQueryBuilder('e')
                    -> where('e.status = :statusFinished')
                     ->setParameter('statusFinished', 'finished')
                    -> join('e.schools','s')
                    -> andWhere('s.name = :schoolName')
                     ->setParameter('schoolName', $user->getSchool()->getName())
                    -> orderBy('e.dateOfEvent','DESC')
                    ->setMaxResults(1);

        // DO NOT put "->getSingleResult()" here (because NoResultExeption cached somewhere else)
		return $qb->getQuery()->getSingleResult();
	}

    public function findPreviousOrCurrentEditionByUserSchool($user)
    {
        $qb = $this -> createQueryBuilder('e')
                    -> where('e.status = :statusFinished OR e.status = :statusInProgress')
                     ->setParameter('statusFinished', 'finished')
                     ->setParameter('statusInProgress', 'inProgress')
                    -> join('e.schools','s')
                    -> andWhere('s.name = :schoolName')
                     ->setParameter('schoolName', $user->getSchool()->getName())
                    -> orderBy('e.dateOfEvent','DESC')
                    ->setMaxResults(1);

        return $qb->getQuery()->getSingleResult();
    }

    public function findNextEditionBySchool($schoolId)
    {
        $qb = $this -> createQueryBuilder('e')
                    -> where('e.status = :statusScheduled OR e.status = :statusRegistering')
                     ->setParameter('statusScheduled'   , 'scheduled')
                     ->setParameter('statusRegistering' , 'registering')
                    -> join('e.schools','s')
                    -> andWhere('s.id = :schoolId')
                     ->setParameter('schoolId', $schoolId)
                    -> orderBy('e.dateOfEvent','ASC')
                    ->setMaxResults(1);
                    
        // DO NOT put "->getSingleResult()" here (because NoResultExeption cached somewhere else)
        return $qb->getQuery();
    }

    public function findPreviousEditionBySchool($schoolId)
    {
        $qb = $this -> createQueryBuilder('e')
                    -> where('e.status = :statusFinished')
                     ->setParameter('statusFinished', 'finished')
                    -> join('e.schools','s')
                    -> andWhere('s.id = :schoolId')
                     ->setParameter('schoolId', $schoolId)
                    -> orderBy('e.dateOfEvent','DESC')
                    ->setMaxResults(1);

        return $qb->getQuery()->getSingleResult();
    }

    public function findCurrentEditionBySchool($schoolId)
    {
        $qb = $this -> createQueryBuilder('e')
                    -> where('e.status = :statusInProgress')
                     ->setParameter('statusInProgress', 'inProgress')
                    -> join('e.schools','s')
                    -> andWhere('s.id = :schoolId')
                     ->setParameter('schoolId', $schoolId)
                    -> orderBy('e.dateOfEvent','DESC');

        // DO NOT put "->getSingleResult()" here (because NoResultExeption cached somewhere else)
        return $qb->getQuery();
    }

    public function findAllEditionsBySchool($schoolId)
    {
        $qb = $this -> createQueryBuilder('e')
                    -> join('e.schools','s')
                    -> andWhere('s.id = :schoolId')
                     ->setParameter('schoolId', $schoolId)
                    -> orderBy('e.dateOfEvent','DESC');

        return $qb->getQuery()->getResult();
    }
}
