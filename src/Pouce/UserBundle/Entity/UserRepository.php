<?php

namespace Pouce\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	// To get all users in a school (id)
	public function getAllUSersInSchool($idSchool,$userYear)
	{
		$qb = $this	-> createQueryBuilder('u')
                    -> where('YEAR(u.lastLogin) = :userYear')
                     ->setParameter('userYear', $userYear)
                    -> join('u.school','s')
                    -> andWhere('s.id = :idSchool')
                     -> setParameter('idSchool', $idSchool)
                    -> leftJoin('u.teams', 't')
                    -> leftJoin('t.edition','e')
                    // -> andWhere('e.year != :userYear2')
                    //  -> setParameter('userYear2', $userYear)
                    // Exclure le user courant
                    // Exclure les users avec une équipe déja inscrite
                     ;
		return $qb ;					
	}

     // To get all the free, who do not have a team, contesters in the school (id)
    public function getAllFreeUSersInSchool($idSchool,$userYear,$userId)
    {
        $nots = $this   -> createQueryBuilder('u2')
                        -> select('u2.id')
                        -> join('u2.teams', 't')
                        -> join('t.edition','e')
                        -> where('YEAR(e.dateOfEvent) = :userYear')
                         -> setParameter('userYear', $userYear)
                        ->getDQL();

        $qb = $this -> createQueryBuilder('u1');
                    
        $qb         -> select('u1')
                    -> where('YEAR(u1.lastLogin) = :userYear')
                     ->setParameter('userYear', $userYear)
                    -> join('u1.school','s')
                    -> andWhere('s.id = :idSchool')
                     -> setParameter('idSchool', $idSchool)
                    -> andWhere($qb->expr()->notIn('u1.id', $nots))
                    -> andWhere('u1 != :userId')
                     ->setParameter('userId', $userId)
                    -> orderBy('u1.first_name', 'ASC')
                    // Exclure le user courant
                    // Exclure les users avec une équipe déja inscrite
                     ;
        return $qb ;                    
    }

    //Get all users of a school who are register to edition
    public function findAllUsersBySchool($idSchool,$editionId)
    {
        $qb = $this -> createQueryBuilder('u')
                    -> join('u.school','s')
                    -> where('s.id = :idSchool')
                     -> setParameter('idSchool', $idSchool)
                    -> join('s.editions','e')
                    -> andWhere('e.id = :editionId')
                     -> setParameter('editionId',$editionId)
                     ;

        return $qb->getQuery()->getResult() ;
    }

    /**
    * Retourne le coéquipier de la team du user
    */
    public function findOtherUserInTeam($user, $team)
    {
        $qb = $this -> createQueryBuilder('u')
                    -> where('u.id != :id')
                     -> setParameter('id',$user->getId())
                    -> Join('u.teams', 't')
                    -> andWhere('t.id = :teamId')
                     -> setParameter('teamId', $team->getId())
                    -> Join('t.users','user')
                    -> andWhere('user.id != :userId')
                     -> setParameter('userId', $user->getId())
                    ->setMaxResults(1)
        ;
        
        return $qb->getQuery()->getSingleResult() ;  
    }

    /**
    *   Retourne l'un des user de l'équipe
    */
    public function findAUserOfTeam($team)
    {
        $qb = $this -> createQueryBuilder('u')
                    -> Join('u.teams', 't')
                    -> andWhere('t.id = :teamId')
                     -> setParameter('teamId', $team->getId())
                    ->setMaxResults(1)
                    ;

        return $qb->getQuery()->getSingleResult();

    }
}
