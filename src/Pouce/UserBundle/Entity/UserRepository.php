<?php

namespace Pouce\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	// To get all the free, who do not have a team, contesters in the school (id)
	// Warning : Not tested
	public function getAllUSersInSchool($idSchool,$userYear)
	{
		$qb = $this	-> createQueryBuilder('u')
                    -> where('YEAR(u.lastLogin) = :userYear')
                     ->setParameter('userYear', $userYear)
                    -> join('u.school','s')
                    -> andWhere('s.id = :idSchool')
                     -> setParameter('idSchool', $idSchool)
                    -> leftJoin('u.teams', 't')
                    -> leftJoin('t.edition','e')
                    // -> andWhere('e.year != :userYear2')
                    //  -> setParameter('userYear2', $userYear)
                    // Exclure le user courant
                    // Exclure les users avec une équipe déja inscrite
                     ;
		return $qb ;					
	}

    //Get all users of a school who are register to edition
    public function findAllUsersBySchool($idSchool,$editionId)
    {
        $qb = $this -> createQueryBuilder('u')
                    -> join('u.school','s')
                    -> where('s.id = :idSchool')
                     -> setParameter('idSchool', $idSchool)
                    -> join('s.editions','e')
                    -> andWhere('e.id = :editionId')
                     -> setParameter('editionId',$editionId)
                     ;

        return $qb->getQuery()->getResult() ;
    }

    /**
    * Retourne le coéquipier de la team du user
    */
    public function findOtherUserInTeam($userId)
    {
        $qb = $this -> createQueryBuilder('u')
                    -> where('u.id != :id')
                     -> setParameter('id',$userId)
                    -> Join('u.teams', 't')
                    -> Join('t.users','user')
                    -> andWhere('user.id != :userId')
                     -> setParameter('userId', $userId)
                    ->setMaxResults(1)
        ;
            return $qb->getQuery()->getSingleResult() ;  
    }
}
