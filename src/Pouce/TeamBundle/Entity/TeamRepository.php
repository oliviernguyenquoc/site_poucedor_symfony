<?php

namespace Pouce\TeamBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TeamRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TeamRepository extends EntityRepository
{
	// To get all informations for the ranking
	public function getAllTeamsInEdition($idEdition)
	{
		$qb = $this	-> createQueryBuilder('t')
                    -> join('t.users','u')
                    -> addSelect('u')
                    -> join('t.edition','e')
                    -> where('e.id = :idEdition')
                     ->setParameter('idEdition', $idEdition)
                    -> join('t.results','r') //Il faut assurer la jointure (voir s'il y a pas moyen de faire autrement qu'une relation bidirectionnel)
                    -> addSelect('t')
                    -> join('u.school','s')
                    -> addSelect('s')
                    -> orderBy('r.distance','DESC');

		return $qb ;					
	}

	public function getAllTeamsBySchool($idEdition, $idEcole)
	{
		$qb = $this -> getAllTeamsInEdition($idEdition)
					-> where('s.id = :idEcole')
					 ->setParameter('idEcole', $idEcole);
	}public function getAllTeamsBySchool($idEdition, $idEcole)
	{
		$qb = $this -> getAllTeamsInEdition($idEdition)
					-> where('s.id = :idEcole')
					 ->setParameter('idEcole', $idEcole);
	}

	/*
		TODO : Dans la vue, il faut afficher chaque résultat de la requette
		team par team. Puis appliquer un filtre, si l'on veut faire des classements
		différents par type d'équipe (H-H, F-M, F-F)

		Puis il faut gerer les redondances de classement 
	*/

	
	public function getLastTeam($idUser)
	{
        $qb = $this -> createQueryBuilder('t')
                    -> leftJoin('t.users','u', 'WITH', 'u.id = :idUser')
                    -> setParameter('idUser', $idUser)
                    -> orderBy('u.created','DESC')
             ;
        return $qb->getQuery()->getSingleResult() ;    
	}
}
